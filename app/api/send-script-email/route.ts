import { type NextRequest, NextResponse } from "next/server"
import { Resend } from "resend"

const resend = new Resend(process.env.RESEND_API_KEY)

export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    const { to, name, script, formData } = data

    console.log("Script email API route called with data:", { to, name })

    // Script type and topic labels for email
    const scriptTypeMap: { [key: string]: string } = {
      email: "Email Script",
      phone: "Phone Call Script",
      text: "Text Message Script",
      "in-person": "In-Person Script",
      video: "Video Script",
      doorknocking: "Door Knocking Script",
    }

    const topicMap: { [key: string]: string } = {
      "expired-listing": "Expired Listing",
      "first-time-homebuyer": "First Time Homebuyer",
      "past-client": "Past Client",
      neighbor: "Neighbor",
      fsbo: "FSBO (For Sale By Owner)",
      "homeowner-high-equity": "Homeowner with High Equity",
      foreclosure: "Foreclosure",
      rental: "Rental",
      divorce: "Divorce",
      "just-sold": "Just Sold",
      expired: "Expired Listing",
      absentee: "Absentee Owner",
      "off-market": "Off Market",
      other: "Custom Prospect Type",
    }

    // Handle both ScriptIT and Property Script Generator data structures
    const scriptType = formData.scriptType || formData.deliveryMethod
    const topic = formData.topic || formData.prospectType
    const customTopic = formData.customTopic || formData.customProspectType
    
    const scriptTypeLabel = scriptTypeMap[scriptType] || scriptType
    const topicLabel = topic === "other" ? customTopic : topicMap[topic] || topic

    // Create HTML content for email attachment
    const scriptHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${name} - ${scriptTypeLabel}</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            background: linear-gradient(135deg, #ea580c, #dc2626);
            color: white;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 8px;
          }
          .header h1 {
            margin: 0;
            font-size: 28px;
          }
          .header p {
            margin: 10px 0 0;
            font-size: 16px;
          }
          .script-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 5px;
            color: #1f2937;
          }
          .script-details {
            font-size: 18px;
            color: #ea580c;
            margin-bottom: 20px;
            font-weight: bold;
          }
          .divider {
            border-top: 1px solid #e5e7eb;
            margin: 20px 0;
          }
          .script-content {
            font-size: 16px;
            line-height: 1.8;
            margin-bottom: 30px;
            color: #374151;
            background: #f9fafb;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
            white-space: pre-wrap;
          }
          .footer {
            background: #f9fafb;
            border-top: 1px solid #e5e7eb;
            padding: 20px;
            text-align: center;
            font-size: 12px;
            color: #6b7280;
            margin-top: 40px;
            border-radius: 8px;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Professional Real Estate Script</h1>
          <p>Generated by ScriptIT - The Next Level U</p>
        </div>
        
        <div class="script-title">${name} - ${formData.brokerageName}</div>
        <div class="script-details">${scriptTypeLabel} - ${topicLabel}</div>
        ${formData.propertyAddress ? `<div class="script-details">Property: ${formData.propertyAddress}</div>` : ''}
        
        <div class="divider"></div>
        
        <div class="script-content">${script}</div>
        
        <div class="footer">
          <p>¬© 2024 The Next Level U - Empowering Real Estate Professionals</p>
          <p>Generated with AI-powered tools designed for real estate success</p>
        </div>
      </body>
      </html>
    `

    const { data: emailData, error } = await resend.emails.send({
      from: "Mike Puma - The Next Level U <noreply@marketing.getempowerai.com>",
      to: [to],
      subject: `Your ${scriptTypeLabel} for ${topicLabel} - ${formData.propertyAddress ? `Property: ${formData.propertyAddress}` : 'ScriptIT'} by The Next Level U`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff;">
          <div style="background: linear-gradient(135deg, #ea580c, #dc2626); padding: 30px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 28px;">Your Script is Ready!</h1>
            <p style="color: white; margin: 15px 0 0 0; font-size: 16px;">Generated by ScriptIT - The Next Level U</p>
          </div>
          
          <div style="padding: 30px; background: #f9fafb;">
            <h2 style="color: #1f2937; margin-bottom: 20px; font-size: 24px;">Hi ${name},</h2>
            
            <p style="color: #4b5563; line-height: 1.6; font-size: 16px;">
              Your professional <strong>${scriptTypeLabel.toLowerCase()}</strong> for <strong>${topicLabel.toLowerCase()}</strong>${formData.propertyAddress ? ` at ${formData.propertyAddress}` : ''} has been generated! This script incorporates DISC behavioral principles and VAK sensory language for maximum effectiveness.
            </p>
            
            ${formData.propertyAddress ? `
            <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0; border: 1px solid #0ea5e9;">
              <h4 style="color: #0c4a6e; margin: 0 0 10px 0; font-size: 16px;">üè† Property Details:</h4>
              <p style="color: #0c4a6e; margin: 0; font-size: 14px;">
                <strong>Address:</strong> ${formData.propertyAddress}<br>
                ${formData.propertyType ? `<strong>Type:</strong> ${formData.propertyType}<br>` : ''}
                ${formData.estimatedValue ? `<strong>Estimated Value:</strong> ${formData.estimatedValue}<br>` : ''}
                ${formData.ownerNames && formData.ownerNames.length > 0 ? `<strong>Owners:</strong> ${formData.ownerNames.join(', ')}` : ''}
              </p>
            </div>
            ` : ''}
            
            <div style="background: white; padding: 25px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #ea580c; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
              <h3 style="color: #1f2937; margin-top: 0; font-size: 18px;">Your Professional Script:</h3>
              <div style="color: #4b5563; line-height: 1.6; white-space: pre-wrap; font-size: 15px; border: 1px solid #e5e7eb; padding: 15px; border-radius: 4px; background: #f8f9fa; max-height: 300px; overflow-y: auto;">
                ${script}
              </div>
            </div>
            
            <p style="color: #4b5563; line-height: 1.6; font-size: 16px;">
              I've also attached a beautifully formatted HTML version of your script that you can use for reference and training.
            </p>

            <div style="background: linear-gradient(135deg, #fef3c7, #fde68a); padding: 20px; border-radius: 8px; margin: 25px 0; border: 1px solid #f59e0b;">
              <h4 style="color: #92400e; margin: 0 0 15px 0; font-size: 16px;">üí° How to Use Your Script:</h4>
              <ul style="color: #78350f; margin: 0; padding-left: 20px; line-height: 1.6;">
                <li style="margin-bottom: 5px;">Practice the script until it feels natural</li>
                <li style="margin-bottom: 5px;">Customize it with specific details for each prospect</li>
                <li style="margin-bottom: 5px;">Use the DISC and VAK principles to adapt your delivery</li>
                <li style="margin-bottom: 5px;">Focus on the call-to-action at the end</li>
                <li style="margin-bottom: 5px;">Track your results and refine as needed</li>
                <li>Print for easy reference during calls</li>
              </ul>
            </div>
            
            <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 25px 0; border: 1px solid #0ea5e9;">
              <p style="color: #0c4a6e; margin: 0; font-size: 14px; text-align: center;">
                <strong>Need more scripts?</strong> Visit our AI Hub for 10 more powerful real estate tools!
              </p>
            </div>
            
            <p style="color: #6b7280; font-size: 14px; line-height: 1.6; margin-top: 30px;">
              Best regards,<br>
              <strong>Mike Puma</strong><br>
              The Next Level U Team<br>
              <a href="mailto:MikePuma@c21be.com" style="color: #ea580c; text-decoration: none;">MikePuma@c21be.com</a>
            </p>
          </div>
          
          <div style="background: #1f2937; padding: 25px; text-align: center;">
            <p style="color: #9ca3af; margin: 0; font-size: 14px;">
              ¬© 2024 The Next Level U. Empowering real estate professionals with AI-powered tools.
            </p>
            <p style="color: #6b7280; margin: 10px 0 0 0; font-size: 12px;">
              This email was generated by our ScriptIT AI tool. Visit us for more real estate solutions.
            </p>
          </div>
        </div>
      `,
      attachments: [
        {
          filename: `${name.replace(/\s+/g, "_")}_${scriptTypeLabel.replace(/\s+/g, "_")}_${formData.propertyAddress ? formData.propertyAddress.split(',')[0].replace(/[^a-zA-Z0-9]/g, "_") : topicLabel.replace(/\s+/g, "_")}_Script.html`,
          content: scriptHTML,
        },
      ],
    })

    if (error) {
      console.error("Resend error:", error)
      throw new Error(`Resend error: ${error.message}`)
    }

    console.log("Script email sent successfully:", emailData?.id)
    return NextResponse.json({ success: true, messageId: emailData?.id })
  } catch (error) {
    console.error("Error in script email API route:", error)
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        details: error instanceof Error ? error.stack : undefined,
      },
      { status: 500 },
    )
  }
}
