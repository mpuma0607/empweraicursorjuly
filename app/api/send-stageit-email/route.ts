import { NextRequest, NextResponse } from "next/server"
import { Resend } from "resend"

const resend = new Resend(process.env.RESEND_API_KEY)

export async function POST(request: NextRequest) {
  try {
    const { to, subject, content, imageUrl, fileName } = await request.json()

    // Validate required fields
    if (!to || !subject || !content) {
      return NextResponse.json(
        { error: 'Missing required fields: to, subject, content' },
        { status: 400 }
      )
    }

    // Prepare attachments if image is provided
    let attachments: any[] = []
    if (imageUrl && fileName) {
      try {
        // Fetch the image data
        const imageResponse = await fetch(imageUrl)
        if (imageResponse.ok) {
          const imageBuffer = await imageResponse.arrayBuffer()
          const base64Image = Buffer.from(imageBuffer).toString('base64')
          
          // Determine content type from the image
          const contentType = imageResponse.headers.get('content-type') || 'image/png'
          
          attachments.push({
            filename: fileName,
            content: base64Image,
            contentType: contentType,
            disposition: 'attachment'
          })
        }
      } catch (error) {
        console.warn('Failed to fetch image for attachment:', error)
        // Continue without attachment if image fetch fails
      }
    }

    if (!process.env.RESEND_API_KEY) {
      console.error("RESEND_API_KEY is missing!")
      return NextResponse.json({ 
        error: "Email service not configured - RESEND_API_KEY environment variable is missing",
        details: {
          message: "The RESEND_API_KEY environment variable is required for sending emails",
          solution: "Add RESEND_API_KEY to your environment variables or deployment configuration",
          currentEnv: process.env.NODE_ENV,
          isVercel: !!process.env.VERCEL
        }
      }, { status: 500 })
    }

    console.log("Sending StageIT email via Resend to:", to)
    console.log("Attachments:", attachments.length > 0 ? `${attachments.length} file(s)` : 'none')

    // Create email content with image
    let emailContent: string
    if (imageUrl) {
      emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px;">
            Your Virtual Staging Results
          </h2>
          
          <div style="text-align: center; margin: 20px 0;">
            <img src="${imageUrl}" alt="Virtual Staging" style="max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
          </div>
          
          <div style="background-color: #f8fafc; border-left: 4px solid #2563eb; padding: 20px; margin: 20px 0; border-radius: 4px;">
            <div style="white-space: pre-wrap; line-height: 1.6;">
              ${content}
            </div>
          </div>
          
          <p style="color: #6b7280; font-size: 14px;">
            This virtual staging was generated using AI-powered tools to help showcase your property's potential.
          </p>
          
          <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;">
          
          <p style="color: #6b7280; font-size: 12px; text-align: center;">
            Generated by StageIT AI - Virtual Property Staging
          </p>
        </div>
      `
    } else {
      emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px;">
            Your Virtual Staging Results
          </h2>
          
          <div style="background-color: #f8fafc; border-left: 4px solid #2563eb; padding: 20px; margin: 20px 0; border-radius: 4px;">
            <div style="white-space: pre-wrap; line-height: 1.6;">
              ${content}
            </div>
          </div>
          
          <p style="color: #6b7280; font-size: 14px;">
            This virtual staging was generated using AI-powered tools to help showcase your property's potential.
          </p>
          
          <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;">
          
          <p style="color: #6b7280; font-size: 12px; text-align: center;">
            Generated by StageIT AI - Virtual Property Staging
          </p>
        </div>
      `
    }

    const emailData: any = {
      from: "StageIT AI <noreply@marketing.getempowerai.com>",
      to: [to],
      subject: subject,
      html: emailContent,
    }

    // Add attachments if any
    if (attachments.length > 0) {
      emailData.attachments = attachments
    }

    const result = await resend.emails.send(emailData)

    if (result.error) {
      console.error("Resend API error:", result.error)
      const errorMessage = result.error.message || result.error.toString() || 'Unknown Resend API error'
      return NextResponse.json(
        { error: `Failed to send email: ${errorMessage}` },
        { status: 500 }
      )
    }

    console.log("StageIT email sent successfully via Resend:", result.data?.id)

    return NextResponse.json({
      success: true,
      messageId: result.data?.id,
      message: 'StageIT email sent successfully via Resend'
    })

  } catch (error) {
    console.error('Error sending StageIT email via Resend:', error)
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to send email',
        details: {
          message: "An unexpected error occurred while sending the email",
          originalError: error instanceof Error ? error.message : String(error),
          envInfo: {
            hasApiKey: !!process.env.RESEND_API_KEY,
            environment: process.env.NODE_ENV,
            isVercel: !!process.env.VERCEL
          }
        }
      },
      { status: 500 }
    )
  }
}
